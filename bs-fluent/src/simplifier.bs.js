// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function make_fn_name(namespace, name, $$public) {
  var name$1 = namespace === "" || name === "" ? name : "_" + name;
  var namespace$1 = $$public ? namespace : "_" + namespace;
  var formatted_namespace = namespace$1.replace(/-/g, "_");
  var formatted_name = name$1.replace(/-/g, "_");
  return formatted_namespace + formatted_name;
}

function simplify_identifier(param) {
  switch (param.tag | 0) {
    case /* NumberLiteral */7 :
        return param[0].value;
    case /* Identifier */17 :
        return param[0].name;
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "simplifier.ml",
              46,
              26
            ]
          ];
  }
}

function simplify_literal(param) {
  switch (param.tag | 0) {
    case /* StringLiteral */6 :
        return "\"" + (param[0].value + "\"");
    case /* NumberLiteral */7 :
        return param[0].value;
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "simplifier.ml",
              53,
              23
            ]
          ];
  }
}

function get_named_argument(param) {
  if (param.tag === /* CallArguments */13) {
    return param[0].named;
  }
  throw [
        Caml_builtin_exceptions.match_failure,
        /* tuple */[
          "simplifier.ml",
          60,
          25
        ]
      ];
}

function simplify_named_arguments(args) {
  return Belt_Array.map(args, (function (param) {
                if (param.tag === /* NamedArgument */16) {
                  var match = param[0];
                  return /* tuple */[
                          simplify_identifier(match.name),
                          simplify_literal(match.value)
                        ];
                }
                throw [
                      Caml_builtin_exceptions.match_failure,
                      /* tuple */[
                        "simplifier.ml",
                        63,
                        22
                      ]
                    ];
              }));
}

function simplify_expression(node, params, in_builtinOpt) {
  var in_builtin = in_builtinOpt !== undefined ? in_builtinOpt : false;
  switch (node.tag | 0) {
    case /* StringLiteral */6 :
        return /* Literal */Caml_chrome_debugger.variant("Literal", 0, [/* LiteralString */Caml_chrome_debugger.variant("LiteralString", 0, [node[0].value])]);
    case /* NumberLiteral */7 :
        return /* Literal */Caml_chrome_debugger.variant("Literal", 0, [/* LiteralInt */Caml_chrome_debugger.variant("LiteralInt", 1, [node[0].value])]);
    case /* MessageReference */8 :
        var match = node[0];
        var attribute = match.attribute;
        var namespace = simplify_identifier(match.id);
        var name = (attribute == null) ? "" : simplify_identifier(attribute);
        var formatted_name = make_fn_name(namespace, name, true);
        return /* FunctionRef */Caml_chrome_debugger.variant("FunctionRef", 3, [
                  formatted_name,
                  []
                ]);
    case /* TermReference */9 :
        var match$1 = node[0];
        var $$arguments = match$1.arguments;
        var attribute$1 = match$1.attribute;
        var namespace$1 = simplify_identifier(match$1.id);
        var name$1 = (attribute$1 == null) ? "" : simplify_identifier(attribute$1);
        var formatted_name$1 = make_fn_name(namespace$1, name$1, false);
        var params$1 = ($$arguments == null) ? [] : simplify_named_arguments(get_named_argument($$arguments));
        return /* FunctionRef */Caml_chrome_debugger.variant("FunctionRef", 3, [
                  formatted_name$1,
                  params$1
                ]);
    case /* VariableReference */10 :
        var name$2 = simplify_identifier(node[0].id);
        var match$2 = Belt_MapString.get(params, name$2);
        if (in_builtin) {
          return /* VariableRef */Caml_chrome_debugger.variant("VariableRef", 2, [name$2]);
        }
        if (match$2 === undefined) {
          return /* VariableRef */Caml_chrome_debugger.variant("VariableRef", 2, [name$2]);
        }
        switch (match$2) {
          case "Js.Date.t" :
              return /* BuiltInRef */Caml_chrome_debugger.variant("BuiltInRef", 4, [
                        "DATETIME",
                        /* VariableRef */Caml_chrome_debugger.variant("VariableRef", 2, [name$2]),
                        []
                      ]);
          case "int" :
              return /* BuiltInRef */Caml_chrome_debugger.variant("BuiltInRef", 4, [
                        "NUMBER",
                        /* VariableRef */Caml_chrome_debugger.variant("VariableRef", 2, [name$2]),
                        []
                      ]);
          default:
            return /* VariableRef */Caml_chrome_debugger.variant("VariableRef", 2, [name$2]);
        }
    case /* FunctionReference */11 :
        var match$3 = node[0];
        var $$arguments$1 = match$3.arguments;
        var name$3 = simplify_identifier(match$3.id);
        var match$4;
        if ($$arguments$1.tag === /* CallArguments */13) {
          var match$5 = $$arguments$1[0];
          match$4 = /* tuple */[
            Belt_Array.getExn(match$5.positional, 0),
            simplify_named_arguments(match$5.named)
          ];
        } else {
          throw [
                Caml_builtin_exceptions.match_failure,
                /* tuple */[
                  "simplifier.ml",
                  114,
                  8
                ]
              ];
        }
        return /* BuiltInRef */Caml_chrome_debugger.variant("BuiltInRef", 4, [
                  name$3,
                  simplify_expression(match$4[0], params, true),
                  match$4[1]
                ]);
    case /* SelectExpression */12 :
        var match$6 = node[0];
        var pattern_array_with_default = Belt_Array.map(match$6.variants, (function (param) {
                if (param.tag === /* Variant */15) {
                  var match = param[0];
                  var value = match.value;
                  var elements;
                  if (value.tag === /* Pattern */3) {
                    elements = value[0].elements;
                  } else {
                    throw [
                          Caml_builtin_exceptions.match_failure,
                          /* tuple */[
                            "simplifier.ml",
                            126,
                            14
                          ]
                        ];
                  }
                  return /* tuple */[
                          simplify_identifier(match.key),
                          simplify_pattern(elements, params),
                          match.default
                        ];
                }
                throw [
                      Caml_builtin_exceptions.match_failure,
                      /* tuple */[
                        "simplifier.ml",
                        123,
                        32
                      ]
                    ];
              }));
        return /* Select */Caml_chrome_debugger.variant("Select", 1, [
                  simplify_expression(match$6.selector, params, in_builtin),
                  pattern_array_with_default
                ]);
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "simplifier.ml",
              68,
              2
            ]
          ];
  }
}

function simplify_pattern(element_array, params) {
  return Belt_Array.map(element_array, (function (param) {
                switch (param.tag | 0) {
                  case /* TextElement */4 :
                      return /* TextElement */Caml_chrome_debugger.variant("TextElement", 0, [param[0].value]);
                  case /* Placeable */5 :
                      return /* Expression */Caml_chrome_debugger.variant("Expression", 1, [simplify_expression(param[0].expression, params, false)]);
                  default:
                    throw [
                          Caml_builtin_exceptions.match_failure,
                          /* tuple */[
                            "simplifier.ml",
                            141,
                            20
                          ]
                        ];
                }
              }));
}

function merge_params(_key, maybe_a, maybe_b) {
  var exit = 0;
  var exit$1 = 0;
  if (maybe_a !== undefined) {
    if (maybe_a === "Js.Date.t") {
      return "Js.Date.t";
    }
    exit$1 = 3;
  } else {
    if (maybe_b === undefined) {
      return ;
    }
    exit$1 = 3;
  }
  if (exit$1 === 3) {
    if (maybe_b !== undefined) {
      switch (maybe_b) {
        case "Js.Date.t" :
            return "Js.Date.t";
        case "float" :
            return "float";
        default:
          exit = 2;
      }
    } else {
      exit = 2;
    }
  }
  if (exit === 2 && maybe_a !== undefined) {
    switch (maybe_a) {
      case "float" :
          return "float";
      case "int" :
          return "int";
      default:
        
    }
  }
  if (maybe_b === "int") {
    return "int";
  } else {
    return "string";
  }
}

function get_first_argument(param) {
  if (param.tag === /* CallArguments */13) {
    return Belt_Array.getExn(param[0].positional, 0);
  }
  throw [
        Caml_builtin_exceptions.match_failure,
        /* tuple */[
          "simplifier.ml",
          163,
          25
        ]
      ];
}

function reduce_pattern_for_params(curr_type_and_acc, pattern_element) {
  var curr_acc = curr_type_and_acc[1];
  var curr_type = curr_type_and_acc[0];
  switch (pattern_element.tag | 0) {
    case /* Pattern */3 :
        var match = Belt_Array.reduce(pattern_element[0].elements, curr_type_and_acc, reduce_pattern_for_params);
        return /* tuple */[
                curr_type,
                Belt_MapString.merge(match[1], curr_acc, merge_params)
              ];
    case /* Placeable */5 :
        var match$1 = reduce_pattern_for_params(curr_type_and_acc, pattern_element[0].expression);
        return /* tuple */[
                curr_type,
                Belt_MapString.merge(match$1[1], curr_acc, merge_params)
              ];
    case /* VariableReference */10 :
        return /* tuple */[
                curr_type,
                Belt_MapString.set(curr_acc, simplify_identifier(pattern_element[0].id), curr_type)
              ];
    case /* FunctionReference */11 :
        var match$2 = pattern_element[0];
        var match$3 = simplify_identifier(match$2.id);
        var param_type;
        switch (match$3) {
          case "DATETIME" :
              param_type = "Js.Date.t";
              break;
          case "NUMBER" :
              param_type = "int";
              break;
          default:
            throw [
                  Caml_builtin_exceptions.match_failure,
                  /* tuple */[
                    "simplifier.ml",
                    187,
                    23
                  ]
                ];
        }
        var match$4 = reduce_pattern_for_params(/* tuple */[
              param_type,
              curr_acc
            ], get_first_argument(match$2.arguments));
        return /* tuple */[
                curr_type,
                Belt_MapString.merge(match$4[1], curr_acc, merge_params)
              ];
    case /* SelectExpression */12 :
        var match$5 = pattern_element[0];
        var match$6 = reduce_pattern_for_params(curr_type_and_acc, match$5.selector);
        var match$7 = Belt_Array.reduce(match$5.variants, curr_type_and_acc, reduce_pattern_for_params);
        return /* tuple */[
                curr_type,
                Belt_MapString.merge(match$6[1], match$7[1], merge_params)
              ];
    case /* Variant */15 :
        var match$8 = reduce_pattern_for_params(curr_type_and_acc, pattern_element[0].value);
        return /* tuple */[
                curr_type,
                Belt_MapString.merge(match$8[1], curr_acc, merge_params)
              ];
    default:
      return /* tuple */[
              curr_type,
              curr_acc
            ];
  }
}

function get_pattern_params(pattern_elements) {
  return Belt_Array.reduce(pattern_elements, /* tuple */[
                "string",
                undefined
              ], reduce_pattern_for_params)[1];
}

function make_fn(param, $$public, namespace, lc) {
  var value = param.value;
  var name = make_fn_name(namespace, simplify_identifier(param.id), $$public);
  var pattern_elements;
  if (value == null) {
    pattern_elements = [];
  } else if (value.tag === /* Pattern */3) {
    pattern_elements = value[0].elements;
  } else {
    throw [
          Caml_builtin_exceptions.match_failure,
          /* tuple */[
            "simplifier.ml",
            240,
            6
          ]
        ];
  }
  var params = get_pattern_params(pattern_elements);
  var simplified_pattern = simplify_pattern(pattern_elements, params);
  return {
          name: name,
          bodies: [/* tuple */[
              "\"" + (lc + "\""),
              simplified_pattern
            ]],
          params: params,
          public: true
        };
}

function make_entry(entry, $$public, lc) {
  var match = entry.value;
  var main_function = !(match == null) ? /* :: */Caml_chrome_debugger.simpleVariant("::", [
        make_fn(entry, $$public, "", lc),
        /* [] */0
      ]) : /* [] */0;
  var name = simplify_identifier(entry.id);
  return Belt_List.concat(main_function, Belt_List.map(Belt_List.fromArray(entry.attributes), (function (attribute) {
                    if (attribute.tag === /* Attribute */14) {
                      return make_fn(attribute[0], $$public, name, lc);
                    }
                    throw [
                          Caml_builtin_exceptions.match_failure,
                          /* tuple */[
                            "simplifier.ml",
                            264,
                            21
                          ]
                        ];
                  })));
}

function simplify_ast(lc, node) {
  if (!node.tag) {
    return Belt_List.toArray(Belt_List.flatten(Belt_List.fromArray(Belt_Array.map(Belt_Array.keep(node[0].body, (function (param) {
                                  switch (param.tag | 0) {
                                    case /* Message */1 :
                                    case /* Term */2 :
                                        return true;
                                    default:
                                      return false;
                                  }
                                })), (function (entry) {
                              switch (entry.tag | 0) {
                                case /* Message */1 :
                                    return make_entry(entry[0], true, lc);
                                case /* Term */2 :
                                    return make_entry(entry[0], false, lc);
                                default:
                                  throw [
                                        Caml_builtin_exceptions.match_failure,
                                        /* tuple */[
                                          "simplifier.ml",
                                          279,
                                          24
                                        ]
                                      ];
                              }
                            })))));
  }
  throw [
        Caml_builtin_exceptions.match_failure,
        /* tuple */[
          "simplifier.ml",
          269,
          2
        ]
      ];
}

exports.make_fn_name = make_fn_name;
exports.simplify_identifier = simplify_identifier;
exports.simplify_literal = simplify_literal;
exports.get_named_argument = get_named_argument;
exports.simplify_named_arguments = simplify_named_arguments;
exports.simplify_expression = simplify_expression;
exports.simplify_pattern = simplify_pattern;
exports.merge_params = merge_params;
exports.get_first_argument = get_first_argument;
exports.reduce_pattern_for_params = reduce_pattern_for_params;
exports.get_pattern_params = get_pattern_params;
exports.make_fn = make_fn;
exports.make_entry = make_entry;
exports.simplify_ast = simplify_ast;
/* No side effect */
