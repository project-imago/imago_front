// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function build_ast(node) {
  console.log(node.type);
  var match = node.type;
  switch (match) {
    case "Annotation" :
        return /* Annotation */Caml_chrome_debugger.variant("Annotation", 23, [{
                    code: node.code,
                    arguments: node.arguments,
                    message: node.message
                  }]);
    case "Attribute" :
        return /* Attribute */Caml_chrome_debugger.variant("Attribute", 14, [{
                    id: build_ast(node.id),
                    value: bind_null(node.value),
                    attributes: [],
                    comment: null
                  }]);
    case "CallArguments" :
        return /* CallArguments */Caml_chrome_debugger.variant("CallArguments", 13, [{
                    positional: Belt_Array.map(node.positional, build_ast),
                    named: Belt_Array.map(node.named, build_ast)
                  }]);
    case "Comment" :
        return /* Comment */Caml_chrome_debugger.variant("Comment", 18, [{
                    content: node.content
                  }]);
    case "FunctionReference" :
        return /* FunctionReference */Caml_chrome_debugger.variant("FunctionReference", 11, [{
                    id: build_ast(node.id),
                    arguments: build_ast(node.arguments)
                  }]);
    case "GroupComment" :
        return /* GroupComment */Caml_chrome_debugger.variant("GroupComment", 19, [{
                    content: node.content
                  }]);
    case "Identifier" :
        return /* Identifier */Caml_chrome_debugger.variant("Identifier", 17, [{
                    name: node.name
                  }]);
    case "Junk" :
        return /* Junk */Caml_chrome_debugger.variant("Junk", 21, [{
                    annotations: Belt_Array.map(node.annotations, build_ast),
                    content: node.content
                  }]);
    case "Message" :
        return /* Message */Caml_chrome_debugger.variant("Message", 1, [{
                    id: build_ast(node.id),
                    value: bind_null(node.value),
                    attributes: Belt_Array.map(node.attributes, build_ast),
                    comment: bind_null(node.comment)
                  }]);
    case "MessageReference" :
        return /* MessageReference */Caml_chrome_debugger.variant("MessageReference", 8, [{
                    id: build_ast(node.id),
                    attribute: bind_null(node.attribute)
                  }]);
    case "NamedArgument" :
        return /* NamedArgument */Caml_chrome_debugger.variant("NamedArgument", 16, [{
                    name: build_ast(node.name),
                    value: build_ast(node.value)
                  }]);
    case "NumberLiteral" :
        return /* NumberLiteral */Caml_chrome_debugger.variant("NumberLiteral", 7, [{
                    value: node.value
                  }]);
    case "Pattern" :
        return /* Pattern */Caml_chrome_debugger.variant("Pattern", 3, [{
                    elements: Belt_Array.map(node.elements, build_ast)
                  }]);
    case "Placeable" :
        return /* Placeable */Caml_chrome_debugger.variant("Placeable", 5, [{
                    expression: build_ast(node.expression)
                  }]);
    case "Resource" :
        return /* Resource */Caml_chrome_debugger.variant("Resource", 0, [{
                    body: Belt_Array.map(node.body, build_ast)
                  }]);
    case "ResourceComment" :
        return /* ResourceComment */Caml_chrome_debugger.variant("ResourceComment", 20, [{
                    content: node.content
                  }]);
    case "SelectExpression" :
        return /* SelectExpression */Caml_chrome_debugger.variant("SelectExpression", 12, [{
                    selector: build_ast(node.selector),
                    variants: Belt_Array.map(node.variants, build_ast)
                  }]);
    case "Span" :
        return /* Span */Caml_chrome_debugger.variant("Span", 22, [{
                    start: node.start,
                    _end: node._end
                  }]);
    case "StringLiteral" :
        return /* StringLiteral */Caml_chrome_debugger.variant("StringLiteral", 6, [{
                    value: node.value
                  }]);
    case "Term" :
        return /* Term */Caml_chrome_debugger.variant("Term", 2, [{
                    id: build_ast(node.id),
                    value: bind_null(node.value),
                    attributes: Belt_Array.map(node.attributes, build_ast),
                    comment: bind_null(node.comment)
                  }]);
    case "TermReference" :
        return /* TermReference */Caml_chrome_debugger.variant("TermReference", 9, [{
                    id: build_ast(node.id),
                    attribute: bind_null(node.attribute),
                    arguments: bind_null(node.arguments)
                  }]);
    case "TextElement" :
        return /* TextElement */Caml_chrome_debugger.variant("TextElement", 4, [{
                    value: node.value
                  }]);
    case "VariableReference" :
        return /* VariableReference */Caml_chrome_debugger.variant("VariableReference", 10, [{
                    id: build_ast(node.id)
                  }]);
    case "Variant" :
        return /* Variant */Caml_chrome_debugger.variant("Variant", 15, [{
                    key: build_ast(node.key),
                    value: build_ast(node.value),
                    default: node.default
                  }]);
    default:
      return /* Junk */Caml_chrome_debugger.variant("Junk", 21, [{
                  annotations: [],
                  content: ""
                }]);
  }
}

function bind_null(nullable) {
  if (nullable == null) {
    return nullable;
  } else {
    return build_ast(nullable);
  }
}

function bind_array(arr) {
  return Belt_Array.map(arr, build_ast);
}

function string_of_literal(str) {
  switch (str.tag | 0) {
    case /* LiteralString */0 :
        return "\"" + (str[0] + "\"");
    case /* LiteralInt */1 :
    case /* LiteralFloat */2 :
        return str[0];
    
  }
}

function builtin_name(name) {
  switch (name) {
    case "DATETIME" :
        return "Fluent.datetime_format";
    case "NUMBER" :
        return "Fluent.number_format";
    default:
      return name;
  }
}

function build_param(param) {
  return param[0] + (" = " + param[1]);
}

function build_builtin_param(param) {
  return "~" + (param[0] + (":" + param[1]));
}

function build_params(params) {
  var match = params.length;
  if (match === 0) {
    return "";
  }
  var formatted_params = Belt_Array.map(params, build_param).join("; ");
  return " { " + (formatted_params + " }");
}

function build_builtin_params(name, params) {
  var params_maker;
  switch (name) {
    case "DATETIME" :
        params_maker = "Fluent.Runtime.make_datetime_params";
        break;
    case "NUMBER" :
        params_maker = "Fluent.Runtime.make_number_params";
        break;
    default:
      params_maker = name;
  }
  var match = params.length;
  var formatted_params = match !== 0 ? Belt_Array.map(params, build_builtin_param).join(" ") : "";
  return "(" + (params_maker + (" " + (formatted_params + "())")));
}

function extract_type_param(other) {
  if (other.tag !== /* BuiltInRef */4) {
    return /* tuple */[
            "",
            other
          ];
  }
  var params = other[2];
  var subject = other[1];
  var name = other[0];
  if (name !== "NUMBER") {
    return /* tuple */[
            "",
            /* BuiltInRef */Caml_chrome_debugger.variant("BuiltInRef", 4, [
                name,
                subject,
                params
              ])
          ];
  }
  var match = Belt_Array.reduce(params, /* tuple */[
        "",
        []
      ], (function (param, param$1) {
          var value = param$1[1];
          var name = param$1[0];
          var new_params = param[1];
          if (name === "type") {
            return /* tuple */[
                    " ~_type:" + value,
                    new_params
                  ];
          }
          new_params.push(/* tuple */[
                name,
                value
              ]);
          return /* tuple */[
                  "",
                  new_params
                ];
        }));
  return /* tuple */[
          match[0],
          /* BuiltInRef */Caml_chrome_debugger.variant("BuiltInRef", 4, [
              name,
              subject,
              match[1]
            ])
        ];
}

function remove_builtin(other) {
  if (other.tag === /* BuiltInRef */4) {
    return other[1];
  } else {
    return other;
  }
}

function build_expression(l) {
  switch (l.tag | 0) {
    case /* Literal */0 :
        return string_of_literal(l[0]);
    case /* Select */1 :
        return build_select(l[0], l[1]);
    case /* VariableRef */2 :
        return "params." + l[0];
    case /* FunctionRef */3 :
        return "(" + (l[0] + (build_params(l[1]) + " lc)"));
    case /* BuiltInRef */4 :
        var name = l[0];
        return "(" + (builtin_name(name) + (" " + (build_expression(l[1]) + (" " + (build_builtin_params(name, l[2]) + " lc)")))));
    
  }
}

function build_pattern_element(text) {
  if (text.tag) {
    return build_expression(text[0]);
  } else {
    return "\"" + (text[0] + "\"");
  }
}

function build_select(selector, pattern_array_with_default) {
  if (selector.tag === /* BuiltInRef */4 && selector[0] === "NUMBER") {
    return build_select_number(selector, pattern_array_with_default);
  } else {
    return build_select_other(selector, pattern_array_with_default);
  }
}

function build_select_number(selector, pattern_array_with_default) {
  var match = extract_type_param(selector);
  var selector$1 = match[1];
  var selector_without_builtin = remove_builtin(selector$1);
  var built_selector = build_expression(selector$1);
  var selector$2 = "(" + (built_selector + (", Fluent.plural_rule " + (build_expression(selector_without_builtin) + (" lc" + (match[0] + ")")))));
  var patterns = Belt_Array.map(Belt_Array.keep(pattern_array_with_default, (function (param) {
              return !param[2];
            })), (function (param) {
          var name = param[0];
          return /* tuple */[
                  "\"" + (name + ("\", _ | _, \"" + (name + "\""))),
                  param[1]
                ];
        }));
  var default_pattern = Belt_Option.map(Belt_Array.get(Belt_Array.keep(pattern_array_with_default, (function (param) {
                  return param[2];
                })), 0), (function (param) {
          return /* tuple */[
                  "_, _",
                  param[1]
                ];
        }));
  return build_switch(selector$2, patterns, default_pattern);
}

function build_select_other(selector, pattern_array_with_default) {
  var selector$1 = build_expression(selector);
  var patterns = Belt_Array.map(Belt_Array.keep(pattern_array_with_default, (function (param) {
              return !param[2];
            })), (function (param) {
          return /* tuple */[
                  "\"" + (param[0] + "\""),
                  param[1]
                ];
        }));
  var default_pattern = Belt_Option.map(Belt_Array.get(Belt_Array.keep(pattern_array_with_default, (function (param) {
                  return param[2];
                })), 0), (function (param) {
          return /* tuple */[
                  "_",
                  param[1]
                ];
        }));
  return build_switch(selector$1, patterns, default_pattern);
}

function build_pattern(pattern) {
  return Belt_Array.map(pattern, build_pattern_element).join(" ^ ");
}

function build_switch_case(param) {
  return "| " + (param[0] + (" ->\n" + build_pattern(param[1])));
}

function build_switch(selector, pattern_array, default_pattern) {
  return "match " + (selector + (" with\n" + (Belt_Array.map(pattern_array, build_switch_case).join("\n") + ("\n" + (
                  default_pattern !== undefined ? build_switch_case(default_pattern) : ""
                )))));
}

function type_params(param) {
  var inside_record = Belt_Array.map(Belt_MapString.toArray(param.params), (function (param) {
            return param[0] + (" : " + param[1]);
          })).join(" ; ");
  return "type " + (param.name + ("_params = { " + (inside_record + " }\n")));
}

function function_has_params(fn) {
  return !Belt_MapString.isEmpty(fn.params);
}

function build_function_head(fn) {
  var params = Belt_MapString.isEmpty(fn.params) ? "" : " (params : " + (fn.name + "_params)");
  return "let " + (fn.name + (params + " lc =\n"));
}

function build_function(fn) {
  var type_params$1 = Belt_MapString.isEmpty(fn.params) ? "" : type_params(fn);
  var head = build_function_head(fn);
  var match = fn.bodies.length;
  var body = match !== 0 ? (
      match !== 1 ? build_switch("lc", fn.bodies, undefined) : build_pattern(Belt_Array.getExn(fn.bodies, 0)[1])
    ) : "";
  return type_params$1 + (head + body);
}

function build(fn_array) {
  return Belt_Array.map(fn_array, build_function).join("\n\n");
}

function make_fn_name(namespace, name, $$public) {
  var name$1 = namespace === "" || name === "" ? name : "_" + name;
  var namespace$1 = $$public ? namespace : "_" + namespace;
  var formatted_namespace = namespace$1.replace(/-/g, "_");
  var formatted_name = name$1.replace(/-/g, "_");
  return formatted_namespace + formatted_name;
}

function simplify_identifier(param) {
  switch (param.tag | 0) {
    case /* NumberLiteral */7 :
        return param[0].value;
    case /* Identifier */17 :
        return param[0].name;
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "compiler.ml",
              380,
              26
            ]
          ];
  }
}

function simplify_literal(param) {
  switch (param.tag | 0) {
    case /* StringLiteral */6 :
        return "\"" + (param[0].value + "\"");
    case /* NumberLiteral */7 :
        return param[0].value;
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "compiler.ml",
              384,
              23
            ]
          ];
  }
}

function get_named_argument(param) {
  if (param.tag === /* CallArguments */13) {
    return param[0].named;
  }
  throw [
        Caml_builtin_exceptions.match_failure,
        /* tuple */[
          "compiler.ml",
          388,
          25
        ]
      ];
}

function simplify_named_arguments(args) {
  return Belt_Array.map(args, (function (param) {
                if (param.tag === /* NamedArgument */16) {
                  var match = param[0];
                  return /* tuple */[
                          simplify_identifier(match.name),
                          simplify_literal(match.value)
                        ];
                }
                throw [
                      Caml_builtin_exceptions.match_failure,
                      /* tuple */[
                        "compiler.ml",
                        393,
                        2
                      ]
                    ];
              }));
}

function simplify_expression(node, params, in_builtinOpt) {
  var in_builtin = in_builtinOpt !== undefined ? in_builtinOpt : false;
  switch (node.tag | 0) {
    case /* StringLiteral */6 :
        return /* Literal */Caml_chrome_debugger.variant("Literal", 0, [/* LiteralString */Caml_chrome_debugger.variant("LiteralString", 0, [node[0].value])]);
    case /* NumberLiteral */7 :
        return /* Literal */Caml_chrome_debugger.variant("Literal", 0, [/* LiteralInt */Caml_chrome_debugger.variant("LiteralInt", 1, [node[0].value])]);
    case /* MessageReference */8 :
        var match = node[0];
        var attribute = match.attribute;
        var namespace = simplify_identifier(match.id);
        var name = (attribute == null) ? "" : simplify_identifier(attribute);
        var formatted_name = make_fn_name(namespace, name, true);
        return /* FunctionRef */Caml_chrome_debugger.variant("FunctionRef", 3, [
                  formatted_name,
                  []
                ]);
    case /* TermReference */9 :
        var match$1 = node[0];
        var $$arguments = match$1.arguments;
        var attribute$1 = match$1.attribute;
        var namespace$1 = simplify_identifier(match$1.id);
        var name$1 = (attribute$1 == null) ? "" : simplify_identifier(attribute$1);
        var formatted_name$1 = make_fn_name(namespace$1, name$1, false);
        var params$1 = ($$arguments == null) ? [] : simplify_named_arguments(get_named_argument($$arguments));
        return /* FunctionRef */Caml_chrome_debugger.variant("FunctionRef", 3, [
                  formatted_name$1,
                  params$1
                ]);
    case /* VariableReference */10 :
        var name$2 = simplify_identifier(node[0].id);
        var match$2 = Belt_MapString.get(params, name$2);
        if (in_builtin) {
          return /* VariableRef */Caml_chrome_debugger.variant("VariableRef", 2, [name$2]);
        }
        if (match$2 === undefined) {
          return /* VariableRef */Caml_chrome_debugger.variant("VariableRef", 2, [name$2]);
        }
        switch (match$2) {
          case "Js.Date.t" :
              return /* BuiltInRef */Caml_chrome_debugger.variant("BuiltInRef", 4, [
                        "DATETIME",
                        /* VariableRef */Caml_chrome_debugger.variant("VariableRef", 2, [name$2]),
                        []
                      ]);
          case "int" :
              return /* BuiltInRef */Caml_chrome_debugger.variant("BuiltInRef", 4, [
                        "NUMBER",
                        /* VariableRef */Caml_chrome_debugger.variant("VariableRef", 2, [name$2]),
                        []
                      ]);
          default:
            return /* VariableRef */Caml_chrome_debugger.variant("VariableRef", 2, [name$2]);
        }
    case /* FunctionReference */11 :
        var match$3 = node[0];
        var $$arguments$1 = match$3.arguments;
        var name$3 = simplify_identifier(match$3.id);
        var match$4;
        if ($$arguments$1.tag === /* CallArguments */13) {
          var match$5 = $$arguments$1[0];
          match$4 = /* tuple */[
            Belt_Array.getExn(match$5.positional, 0),
            simplify_named_arguments(match$5.named)
          ];
        } else {
          throw [
                Caml_builtin_exceptions.match_failure,
                /* tuple */[
                  "compiler.ml",
                  451,
                  8
                ]
              ];
        }
        return /* BuiltInRef */Caml_chrome_debugger.variant("BuiltInRef", 4, [
                  name$3,
                  simplify_expression(match$4[0], params, true),
                  match$4[1]
                ]);
    case /* SelectExpression */12 :
        var match$6 = node[0];
        var pattern_array_with_default = Belt_Array.map(match$6.variants, (function (param) {
                if (param.tag === /* Variant */15) {
                  var match = param[0];
                  var value = match.value;
                  var key = match.key;
                  console.log(key);
                  var elements;
                  if (value.tag === /* Pattern */3) {
                    elements = value[0].elements;
                  } else {
                    throw [
                          Caml_builtin_exceptions.match_failure,
                          /* tuple */[
                            "compiler.ml",
                            468,
                            13
                          ]
                        ];
                  }
                  return /* tuple */[
                          simplify_identifier(key),
                          simplify_pattern(elements, params),
                          match.default
                        ];
                }
                throw [
                      Caml_builtin_exceptions.match_failure,
                      /* tuple */[
                        "compiler.ml",
                        465,
                        9
                      ]
                    ];
              }));
        return /* Select */Caml_chrome_debugger.variant("Select", 1, [
                  simplify_expression(match$6.selector, params, in_builtin),
                  pattern_array_with_default
                ]);
    default:
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "compiler.ml",
              398,
              2
            ]
          ];
  }
}

function simplify_pattern(element_array, params) {
  return Belt_Array.map(element_array, (function (param) {
                switch (param.tag | 0) {
                  case /* TextElement */4 :
                      return /* TextElement */Caml_chrome_debugger.variant("TextElement", 0, [param[0].value]);
                  case /* Placeable */5 :
                      return /* Expression */Caml_chrome_debugger.variant("Expression", 1, [simplify_expression(param[0].expression, params, false)]);
                  default:
                    throw [
                          Caml_builtin_exceptions.match_failure,
                          /* tuple */[
                            "compiler.ml",
                            482,
                            4
                          ]
                        ];
                }
              }));
}

function merge_params(_key, maybe_a, maybe_b) {
  var exit = 0;
  if (maybe_a !== undefined) {
    if (maybe_a === "int") {
      return "int";
    }
    exit = 2;
  } else {
    if (maybe_b === undefined) {
      return ;
    }
    exit = 2;
  }
  if (exit === 2 && maybe_b !== undefined) {
    switch (maybe_b) {
      case "float" :
          return "float";
      case "int" :
          return "int";
      default:
        
    }
  }
  if (maybe_a === "float") {
    return "float";
  } else {
    return "string";
  }
}

function get_first_argument(param) {
  if (param.tag === /* CallArguments */13) {
    return Belt_Array.getExn(param[0].positional, 0);
  }
  throw [
        Caml_builtin_exceptions.match_failure,
        /* tuple */[
          "compiler.ml",
          496,
          25
        ]
      ];
}

function reduce_pattern_for_params(curr_type_and_acc, pattern_element) {
  var curr_acc = curr_type_and_acc[1];
  var curr_type = curr_type_and_acc[0];
  switch (pattern_element.tag | 0) {
    case /* Pattern */3 :
        console.log("pattern");
        var match = Belt_Array.reduce(pattern_element[0].elements, curr_type_and_acc, reduce_pattern_for_params);
        return /* tuple */[
                curr_type,
                Belt_MapString.merge(match[1], curr_acc, merge_params)
              ];
    case /* Placeable */5 :
        console.log("placeable");
        var match$1 = reduce_pattern_for_params(curr_type_and_acc, pattern_element[0].expression);
        var acc = match$1[1];
        console.log(acc);
        return /* tuple */[
                curr_type,
                Belt_MapString.merge(acc, curr_acc, merge_params)
              ];
    case /* VariableReference */10 :
        var id = pattern_element[0].id;
        console.log("variable");
        console.log("adding " + (simplify_identifier(id) + (" as " + curr_type)));
        return /* tuple */[
                curr_type,
                Belt_MapString.set(curr_acc, simplify_identifier(id), curr_type)
              ];
    case /* FunctionReference */11 :
        console.log("function");
        var match$2 = reduce_pattern_for_params(/* tuple */[
              "int",
              curr_acc
            ], get_first_argument(pattern_element[0].arguments));
        return /* tuple */[
                curr_type,
                Belt_MapString.merge(match$2[1], curr_acc, merge_params)
              ];
    case /* SelectExpression */12 :
        var match$3 = pattern_element[0];
        console.log("select");
        var match$4 = reduce_pattern_for_params(curr_type_and_acc, match$3.selector);
        var match$5 = Belt_Array.reduce(match$3.variants, curr_type_and_acc, reduce_pattern_for_params);
        return /* tuple */[
                curr_type,
                Belt_MapString.merge(match$4[1], match$5[1], merge_params)
              ];
    case /* Variant */15 :
        console.log("variant");
        var match$6 = reduce_pattern_for_params(curr_type_and_acc, pattern_element[0].value);
        return /* tuple */[
                curr_type,
                Belt_MapString.merge(match$6[1], curr_acc, merge_params)
              ];
    default:
      return /* tuple */[
              curr_type,
              curr_acc
            ];
  }
}

function get_pattern_params(pattern_elements) {
  return Belt_Array.reduce(pattern_elements, /* tuple */[
                "string",
                undefined
              ], reduce_pattern_for_params)[1];
}

function make_fn(param, $$public, namespace) {
  var value = param.value;
  var name = make_fn_name(namespace, simplify_identifier(param.id), $$public);
  var pattern_elements;
  if (value == null) {
    pattern_elements = [];
  } else if (value.tag === /* Pattern */3) {
    pattern_elements = value[0].elements;
  } else {
    throw [
          Caml_builtin_exceptions.match_failure,
          /* tuple */[
            "compiler.ml",
            557,
            8
          ]
        ];
  }
  var params = get_pattern_params(pattern_elements);
  var simplified_pattern = simplify_pattern(pattern_elements, params);
  return {
          name: name,
          bodies: [/* tuple */[
              "en",
              simplified_pattern
            ]],
          params: params,
          public: true
        };
}

function make_entry(entry, $$public) {
  var name = simplify_identifier(entry.id);
  return Belt_List.concat(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                make_fn(entry, $$public, ""),
                /* [] */0
              ]), Belt_List.map(Belt_List.fromArray(entry.attributes), (function (attribute) {
                    if (attribute.tag === /* Attribute */14) {
                      return make_fn(attribute[0], $$public, name);
                    }
                    throw [
                          Caml_builtin_exceptions.match_failure,
                          /* tuple */[
                            "compiler.ml",
                            575,
                            6
                          ]
                        ];
                  })));
}

function simplify_ast(node) {
  if (!node.tag) {
    return Belt_List.toArray(Belt_List.flatten(Belt_List.fromArray(Belt_Array.map(Belt_Array.keep(node[0].body, (function (param) {
                                  switch (param.tag | 0) {
                                    case /* Message */1 :
                                    case /* Term */2 :
                                        return true;
                                    default:
                                      return false;
                                  }
                                })), (function (entry) {
                              switch (entry.tag | 0) {
                                case /* Message */1 :
                                    return make_entry(entry[0], true);
                                case /* Term */2 :
                                    return make_entry(entry[0], false);
                                default:
                                  throw [
                                        Caml_builtin_exceptions.match_failure,
                                        /* tuple */[
                                          "compiler.ml",
                                          592,
                                          8
                                        ]
                                      ];
                              }
                            })))));
  }
  throw [
        Caml_builtin_exceptions.match_failure,
        /* tuple */[
          "compiler.ml",
          582,
          2
        ]
      ];
}

function compile(lc, resource) {
  var ast = build_ast(resource);
  return build(simplify_ast(ast));
}

exports.build_ast = build_ast;
exports.bind_null = bind_null;
exports.bind_array = bind_array;
exports.string_of_literal = string_of_literal;
exports.builtin_name = builtin_name;
exports.build_param = build_param;
exports.build_builtin_param = build_builtin_param;
exports.build_params = build_params;
exports.build_builtin_params = build_builtin_params;
exports.extract_type_param = extract_type_param;
exports.remove_builtin = remove_builtin;
exports.build_expression = build_expression;
exports.build_pattern_element = build_pattern_element;
exports.build_select = build_select;
exports.build_select_number = build_select_number;
exports.build_select_other = build_select_other;
exports.build_pattern = build_pattern;
exports.build_switch_case = build_switch_case;
exports.build_switch = build_switch;
exports.type_params = type_params;
exports.function_has_params = function_has_params;
exports.build_function_head = build_function_head;
exports.build_function = build_function;
exports.build = build;
exports.make_fn_name = make_fn_name;
exports.simplify_identifier = simplify_identifier;
exports.simplify_literal = simplify_literal;
exports.get_named_argument = get_named_argument;
exports.simplify_named_arguments = simplify_named_arguments;
exports.simplify_expression = simplify_expression;
exports.simplify_pattern = simplify_pattern;
exports.merge_params = merge_params;
exports.get_first_argument = get_first_argument;
exports.reduce_pattern_for_params = reduce_pattern_for_params;
exports.get_pattern_params = get_pattern_params;
exports.make_fn = make_fn;
exports.make_entry = make_entry;
exports.simplify_ast = simplify_ast;
exports.compile = compile;
/* No side effect */
