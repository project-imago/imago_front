// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Matrix from "./matrix.bs.js";
import * as Tea_ex from "bucklescript-tea/lib/es6/src-ocaml/tea_ex.js";
import * as Tea_cmd from "bucklescript-tea/lib/es6/src-ocaml/tea_cmd.js";
import * as Tea_sub from "bucklescript-tea/lib/es6/src-ocaml/tea_sub.js";
import * as Tea_html from "bucklescript-tea/lib/es6/src-ocaml/tea_html.js";
import * as Tea_task from "bucklescript-tea/lib/es6/src-ocaml/tea_task.js";
import * as Belt_List from "bs-platform/lib/es6/belt_List.js";
import * as Tea_promise from "bucklescript-tea/lib/es6/src-ocaml/tea_promise.js";
import * as Caml_chrome_debugger from "bs-platform/lib/es6/caml_chrome_debugger.js";

function loggedIn(param_0) {
  return /* LoggedIn */Caml_chrome_debugger.variant("LoggedIn", 0, [param_0]);
}

function getJoinedRooms(param_0) {
  return /* GetJoinedRooms */Caml_chrome_debugger.variant("GetJoinedRooms", 1, [param_0]);
}

function goTo(param_0) {
  return /* GoTo */Caml_chrome_debugger.variant("GoTo", 2, [param_0]);
}

function info(param_0) {
  return /* Info */Caml_chrome_debugger.variant("Info", 3, [param_0]);
}

function restoredCredentials(param_0) {
  return /* RestoredCredentials */Caml_chrome_debugger.variant("RestoredCredentials", 4, [param_0]);
}

function promiseToTask(promise) {
  return Tea_task.nativeBinding((function (cb) {
                promise.then((function (res) {
                          return Promise.resolve(Curry._1(cb, /* Ok */Caml_chrome_debugger.variant("Ok", 0, [res])));
                        })).catch((function (err) {
                        var err_to_string = function (err) {
                          return "" + (String(err) + "");
                        };
                        return Promise.resolve(Curry._1(cb, /* Error */Caml_chrome_debugger.variant("Error", 1, [err_to_string(err)])));
                      }));
                return /* () */0;
              }));
}

function login_cmd(client) {
  return Tea_promise.result(Matrix.login(client), loggedIn);
}

function get_joined_rooms_cmd(client) {
  return Tea_promise.result(Matrix.get_joined_rooms(client), getJoinedRooms);
}

console.log("init chat");

var restore_cmd = Tea_task.attempt(restoredCredentials, Tea_task.andThen((function (param) {
            var matrix_id = param[1];
            var access_token = param[0];
            console.log(access_token);
            var client = Matrix.new_client_params(matrix_id, access_token);
            return Tea_task.succeed(/* tuple */[
                        client,
                        access_token,
                        matrix_id
                      ]);
          }), Tea_task.andThen((function (param) {
                if (param) {
                  var match = param[1];
                  if (match && !match[1]) {
                    var nullable_matrix_id = match[0];
                    var nullable_access_token = param[0];
                    if (!(nullable_access_token == null) && !(nullable_matrix_id == null)) {
                      return Tea_task.succeed(/* tuple */[
                                  nullable_access_token,
                                  nullable_matrix_id
                                ]);
                    } else {
                      return Tea_task.fail("LocalStorage error");
                    }
                  } else {
                    return Tea_task.fail("LocalStorage error");
                  }
                } else {
                  return Tea_task.fail("LocalStorage error");
                }
              }), Tea_task.sequence(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Tea_ex.LocalStorage[/* getItem */4]("access_token"),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        Tea_ex.LocalStorage[/* getItem */4]("matrix_id"),
                        /* [] */0
                      ])
                  ])))));

function save_cmd(access_token, matrix_id) {
  return Tea_task.attempt(info, Tea_task.sequence(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Tea_ex.LocalStorage[/* setItem */7]("access_token", access_token),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        Tea_ex.LocalStorage[/* setItem */7]("matrix_id", matrix_id),
                        /* [] */0
                      ])
                  ])));
}

var client = Matrix.new_client(/* () */0);

var model = /* record */Caml_chrome_debugger.record([
    "client",
    "matrix_id",
    "access_token",
    "joined_rooms_ids"
  ], [
    client,
    undefined,
    undefined,
    0
  ]);

var init = /* tuple */[
  model,
  restore_cmd
];

function update(model, param) {
  switch (param.tag | 0) {
    case 0 : 
        var match = param[0];
        if (match.tag) {
          console.log("login failed: " + match[0]);
          return /* tuple */[
                  model,
                  Tea_cmd.none
                ];
        } else {
          var res = match[0];
          console.log(res);
          var model_000 = /* client */model[/* client */0];
          var model_001 = /* matrix_id */res.user_id;
          var model_002 = /* access_token */res.access_token;
          var model_003 = /* joined_rooms_ids */model[/* joined_rooms_ids */3];
          var model$1 = /* record */Caml_chrome_debugger.record([
              "client",
              "matrix_id",
              "access_token",
              "joined_rooms_ids"
            ], [
              model_000,
              model_001,
              model_002,
              model_003
            ]);
          return /* tuple */[
                  model$1,
                  Tea_cmd.batch(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                          save_cmd(res.access_token, res.user_id),
                          /* :: */Caml_chrome_debugger.simpleVariant("::", [
                              Tea_promise.result(Matrix.get_joined_rooms(model_000), getJoinedRooms),
                              /* [] */0
                            ])
                        ]))
                ];
        }
    case 1 : 
        var match$1 = param[0];
        if (match$1.tag) {
          console.log("get joined rooms failed: " + match$1[0]);
          return /* tuple */[
                  model,
                  Tea_cmd.none
                ];
        } else {
          var res$1 = match$1[0];
          console.log(res$1);
          var model_000$1 = /* client */model[/* client */0];
          var model_001$1 = /* matrix_id */model[/* matrix_id */1];
          var model_002$1 = /* access_token */model[/* access_token */2];
          var model$2 = /* record */Caml_chrome_debugger.record([
              "client",
              "matrix_id",
              "access_token",
              "joined_rooms_ids"
            ], [
              model_000$1,
              model_001$1,
              model_002$1,
              res$1
            ]);
          return /* tuple */[
                  model$2,
                  Tea_cmd.none
                ];
        }
    case 2 : 
        return /* tuple */[
                model,
                Tea_cmd.none
              ];
    case 3 : 
        var match$2 = param[0];
        if (match$2.tag) {
          console.log(match$2[0]);
          return /* tuple */[
                  model,
                  Tea_cmd.none
                ];
        } else {
          console.log("info");
          return /* tuple */[
                  model,
                  Tea_cmd.none
                ];
        }
    case 4 : 
        var match$3 = param[0];
        if (match$3.tag) {
          console.log("restore failed: " + match$3[0]);
          return /* tuple */[
                  model,
                  Tea_promise.result(Matrix.login(model[/* client */0]), loggedIn)
                ];
        } else {
          var match$4 = match$3[0];
          var client = match$4[0];
          var model_001$2 = /* matrix_id */match$4[2];
          var model_002$2 = /* access_token */match$4[1];
          var model_003$1 = /* joined_rooms_ids */model[/* joined_rooms_ids */3];
          var model$3 = /* record */Caml_chrome_debugger.record([
              "client",
              "matrix_id",
              "access_token",
              "joined_rooms_ids"
            ], [
              client,
              model_001$2,
              model_002$2,
              model_003$1
            ]);
          return /* tuple */[
                  model$3,
                  Tea_promise.result(Matrix.get_joined_rooms(client), getJoinedRooms)
                ];
        }
    
  }
}

function room_list_view(model) {
  return Tea_html.ul(undefined, undefined, /* [] */0, Belt_List.map(model[/* joined_rooms_ids */3], (function (room_id) {
                    return Tea_html.li(undefined, undefined, /* [] */0, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  Tea_html.button(undefined, undefined, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                          Tea_html.onClick(/* GoTo */Caml_chrome_debugger.variant("GoTo", 2, [/* Room */Caml_chrome_debugger.simpleVariant("Room", [room_id])])),
                                          /* [] */0
                                        ]), /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                          Tea_html.text(room_id),
                                          /* [] */0
                                        ])),
                                  /* [] */0
                                ]));
                  })));
}

var subscriptions = Tea_sub.none;

export {
  loggedIn ,
  getJoinedRooms ,
  goTo ,
  info ,
  restoredCredentials ,
  promiseToTask ,
  login_cmd ,
  get_joined_rooms_cmd ,
  restore_cmd ,
  save_cmd ,
  init ,
  update ,
  room_list_view ,
  subscriptions ,
  
}
/*  Not a pure module */
