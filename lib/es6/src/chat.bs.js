// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Matrix from "./matrix.bs.js";
import * as Tea_ex from "bucklescript-tea/lib/es6/src-ocaml/tea_ex.js";
import * as Tea_cmd from "bucklescript-tea/lib/es6/src-ocaml/tea_cmd.js";
import * as Tea_html from "bucklescript-tea/lib/es6/src-ocaml/tea_html.js";
import * as Tea_task from "bucklescript-tea/lib/es6/src-ocaml/tea_task.js";
import * as Belt_List from "bs-platform/lib/es6/belt_List.js";
import * as Tea_promise from "bucklescript-tea/lib/es6/src-ocaml/tea_promise.js";
import * as Caml_chrome_debugger from "bs-platform/lib/es6/caml_chrome_debugger.js";

function login(param_0) {
  return /* Login */Caml_chrome_debugger.variant("Login", 0, [param_0]);
}

function getJoinedRooms(param_0) {
  return /* GetJoinedRooms */Caml_chrome_debugger.variant("GetJoinedRooms", 1, [param_0]);
}

function goTo(param_0) {
  return /* GoTo */Caml_chrome_debugger.variant("GoTo", 2, [param_0]);
}

function info(param_0) {
  return /* Info */Caml_chrome_debugger.variant("Info", 3, [param_0]);
}

function restoreCredentials(param_0) {
  return /* RestoreCredentials */Caml_chrome_debugger.variant("RestoreCredentials", 4, [param_0]);
}

function try_login(client) {
  return Tea_promise.result(Matrix.login(client), login);
}

var try_restore = Tea_task.attempt(restoreCredentials, Tea_task.sequence(/* :: */Caml_chrome_debugger.simpleVariant("::", [
            Tea_ex.LocalStorage[/* getItem */4]("access_token"),
            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                Tea_ex.LocalStorage[/* getItem */4]("matrix_id"),
                /* [] */0
              ])
          ])));

var client = Matrix.new_client(/* () */0);

var model = /* record */Caml_chrome_debugger.record([
    "client",
    "matrix_id",
    "joined_rooms_ids"
  ], [
    client,
    undefined,
    0
  ]);

var init = /* tuple */[
  model,
  try_restore
];

function update(model, param) {
  switch (param.tag | 0) {
    case 0 : 
        var match = param[0];
        if (match.tag) {
          console.log("login failed: " + match[0]);
          return /* tuple */[
                  model,
                  Tea_cmd.none
                ];
        } else {
          var res = match[0];
          console.log(res);
          var model_000 = /* client */model[/* client */0];
          var model_001 = /* matrix_id */res.user_id;
          var model_002 = /* joined_rooms_ids */model[/* joined_rooms_ids */2];
          var model$1 = /* record */Caml_chrome_debugger.record([
              "client",
              "matrix_id",
              "joined_rooms_ids"
            ], [
              model_000,
              model_001,
              model_002
            ]);
          var save_cmd = Tea_task.attempt(info, Tea_task.sequence(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      Tea_ex.LocalStorage[/* setItem */7]("access_token", res.access_token),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          Tea_ex.LocalStorage[/* setItem */7]("matrix_id", res.user_id),
                          /* [] */0
                        ])
                    ])));
          var get_rooms_cmd = Tea_promise.result(Matrix.get_joined_rooms(model_000), getJoinedRooms);
          return /* tuple */[
                  model$1,
                  Tea_cmd.batch(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                          save_cmd,
                          /* :: */Caml_chrome_debugger.simpleVariant("::", [
                              get_rooms_cmd,
                              /* [] */0
                            ])
                        ]))
                ];
        }
    case 1 : 
        var match$1 = param[0];
        if (match$1.tag) {
          console.log("get joined rooms failed: " + match$1[0]);
          return /* tuple */[
                  model,
                  Tea_cmd.none
                ];
        } else {
          var res$1 = match$1[0];
          console.log(res$1);
          var model_000$1 = /* client */model[/* client */0];
          var model_001$1 = /* matrix_id */model[/* matrix_id */1];
          var model$2 = /* record */Caml_chrome_debugger.record([
              "client",
              "matrix_id",
              "joined_rooms_ids"
            ], [
              model_000$1,
              model_001$1,
              res$1
            ]);
          return /* tuple */[
                  model$2,
                  Tea_cmd.none
                ];
        }
    case 2 : 
        return /* tuple */[
                model,
                Tea_cmd.none
              ];
    case 3 : 
        var match$2 = param[0];
        if (match$2.tag) {
          console.log(match$2[0]);
          return /* tuple */[
                  model,
                  Tea_cmd.none
                ];
        } else {
          console.log("info");
          return /* tuple */[
                  model,
                  Tea_cmd.none
                ];
        }
    case 4 : 
        var match$3 = param[0];
        if (match$3.tag) {
          console.log("restore token failed: " + match$3[0]);
          return /* tuple */[
                  model,
                  Tea_cmd.msg(/* GoTo */Caml_chrome_debugger.variant("GoTo", 2, [/* Index */0]))
                ];
        } else {
          var match$4 = match$3[0];
          if (match$4) {
            var match$5 = match$4[1];
            if (match$5 && !match$5[1]) {
              var matrix_id = match$5[0];
              console.log("restore token successful");
              var client = Matrix.new_client_params(matrix_id, match$4[0]);
              return /* tuple */[
                      /* record */Caml_chrome_debugger.record([
                          "client",
                          "matrix_id",
                          "joined_rooms_ids"
                        ], [
                          client,
                          matrix_id,
                          model[/* joined_rooms_ids */2]
                        ]),
                      Tea_promise.result(Matrix.get_joined_rooms(client), getJoinedRooms)
                    ];
            } else {
              return /* tuple */[
                      model,
                      Tea_cmd.msg(/* GoTo */Caml_chrome_debugger.variant("GoTo", 2, [/* Index */0]))
                    ];
            }
          } else {
            return /* tuple */[
                    model,
                    Tea_cmd.msg(/* GoTo */Caml_chrome_debugger.variant("GoTo", 2, [/* Index */0]))
                  ];
          }
        }
    
  }
}

function room_list_view(model) {
  return Tea_html.ul(undefined, undefined, /* [] */0, Belt_List.map(model[/* joined_rooms_ids */2], (function (room_id) {
                    return Tea_html.li(undefined, undefined, /* [] */0, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  Tea_html.button(undefined, undefined, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                          Tea_html.onClick(/* GoTo */Caml_chrome_debugger.variant("GoTo", 2, [/* Room */Caml_chrome_debugger.simpleVariant("Room", [room_id])])),
                                          /* [] */0
                                        ]), /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                          Tea_html.text(room_id),
                                          /* [] */0
                                        ])),
                                  /* [] */0
                                ]));
                  })));
}

export {
  login ,
  getJoinedRooms ,
  goTo ,
  info ,
  restoreCredentials ,
  try_login ,
  try_restore ,
  init ,
  update ,
  room_list_view ,
  
}
/* try_restore Not a pure module */
