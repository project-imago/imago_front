// Generated by BUCKLESCRIPT VERSION 6.0.3, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Matrix from "./matrix.bs.js";
import * as Printf from "bs-platform/lib/es6/printf.js";
import * as Tea_cmd from "bucklescript-tea/lib/es6/src-ocaml/tea_cmd.js";
import * as Tea_sub from "bucklescript-tea/lib/es6/src-ocaml/tea_sub.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Tea_html from "bucklescript-tea/lib/es6/src-ocaml/tea_html.js";
import * as Belt_List from "bs-platform/lib/es6/belt_List.js";
import * as Tea_promise from "bucklescript-tea/lib/es6/src-ocaml/tea_promise.js";
import * as Tea_navigation from "bucklescript-tea/lib/es6/src-ocaml/tea_navigation.js";
import * as Caml_chrome_debugger from "bs-platform/lib/es6/caml_chrome_debugger.js";

function login(param_0) {
  return /* Login */Caml_chrome_debugger.variant("Login", 0, [param_0]);
}

function getJoinedRooms(param_0) {
  return /* GetJoinedRooms */Caml_chrome_debugger.variant("GetJoinedRooms", 1, [param_0]);
}

function location_changed(param_0) {
  return /* Location_changed */Caml_chrome_debugger.variant("Location_changed", 2, [param_0]);
}

function goTo(param_0) {
  return /* GoTo */Caml_chrome_debugger.variant("GoTo", 3, [param_0]);
}

function route_of_location($$location) {
  var route = $$location[/* hash */7].split("/");
  if (route.length !== 3) {
    return /* Index */0;
  } else {
    var match = route[0];
    if (match === "#") {
      var match$1 = route[1];
      if (match$1 === "room") {
        var id = route[2];
        return /* Room */Caml_chrome_debugger.simpleVariant("Room", [id]);
      } else {
        return /* Index */0;
      }
    } else {
      return /* Index */0;
    }
  }
}

function location_of_route(param) {
  if (param) {
    return Curry._1(Printf.sprintf(/* Format */Caml_chrome_debugger.simpleVariant("Format", [
                      /* String_literal */Caml_chrome_debugger.variant("String_literal", 11, [
                          "#/room/",
                          /* String */Caml_chrome_debugger.variant("String", 2, [
                              /* No_padding */0,
                              /* End_of_format */0
                            ])
                        ]),
                      "#/room/%s"
                    ])), param[0]);
  } else {
    return "#/";
  }
}

function update_route(model, route) {
  if (Caml_obj.caml_equal(model[/* route */3], route)) {
    return /* tuple */[
            model,
            Tea_cmd.none
          ];
  } else {
    return /* tuple */[
            /* record */Caml_chrome_debugger.record([
                "client",
                "matrix_id",
                "joined_rooms_ids",
                "route"
              ], [
                model[/* client */0],
                model[/* matrix_id */1],
                model[/* joined_rooms_ids */2],
                route
              ]),
            Tea_navigation.newUrl(location_of_route(route))
          ];
  }
}

function init(param, $$location) {
  console.log("init");
  var client = Matrix.new_client(/* () */0);
  var model = /* record */Caml_chrome_debugger.record([
      "client",
      "matrix_id",
      "joined_rooms_ids",
      "route"
    ], [
      client,
      undefined,
      0,
      0
    ]);
  var login_cmd = Tea_promise.result(Matrix.login(client), login);
  var match = update_route(model, route_of_location($$location));
  return /* tuple */[
          match[0],
          Tea_cmd.batch(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  login_cmd,
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      match[1],
                      /* [] */0
                    ])
                ]))
        ];
}

function update(model, param) {
  switch (param.tag | 0) {
    case 0 : 
        var match = param[0];
        if (match.tag) {
          console.log(match[0]);
          return /* tuple */[
                  model,
                  Tea_cmd.none
                ];
        } else {
          var res = match[0];
          console.log(res);
          var model_000 = /* client */model[/* client */0];
          var model_001 = /* matrix_id */res.user_id;
          var model_002 = /* joined_rooms_ids */model[/* joined_rooms_ids */2];
          var model_003 = /* route */model[/* route */3];
          var model$1 = /* record */Caml_chrome_debugger.record([
              "client",
              "matrix_id",
              "joined_rooms_ids",
              "route"
            ], [
              model_000,
              model_001,
              model_002,
              model_003
            ]);
          var cmd = Tea_promise.result(Matrix.get_joined_rooms(model_000), getJoinedRooms);
          return /* tuple */[
                  model$1,
                  cmd
                ];
        }
    case 1 : 
        var match$1 = param[0];
        if (match$1.tag) {
          console.log(match$1[0]);
          return /* tuple */[
                  model,
                  Tea_cmd.none
                ];
        } else {
          var res$1 = match$1[0];
          console.log(res$1);
          var model_000$1 = /* client */model[/* client */0];
          var model_001$1 = /* matrix_id */model[/* matrix_id */1];
          var model_003$1 = /* route */model[/* route */3];
          var model$2 = /* record */Caml_chrome_debugger.record([
              "client",
              "matrix_id",
              "joined_rooms_ids",
              "route"
            ], [
              model_000$1,
              model_001$1,
              res$1,
              model_003$1
            ]);
          return /* tuple */[
                  model$2,
                  Tea_cmd.none
                ];
        }
    case 2 : 
        return update_route(model, route_of_location(param[0]));
    case 3 : 
        return update_route(model, param[0]);
    
  }
}

function content(model) {
  console.log(model);
  var match = model[/* route */3];
  if (match) {
    return Tea_html.div(undefined, undefined, /* [] */0, /* [] */0);
  } else {
    return Tea_html.ul(undefined, undefined, /* [] */0, Belt_List.map(model[/* joined_rooms_ids */2], (function (room_id) {
                      return Tea_html.li(undefined, undefined, /* [] */0, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                    Tea_html.button(undefined, undefined, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            Tea_html.onClick(/* GoTo */Caml_chrome_debugger.variant("GoTo", 3, [/* Room */Caml_chrome_debugger.simpleVariant("Room", [room_id])])),
                                            /* [] */0
                                          ]), /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            Tea_html.text(room_id),
                                            /* [] */0
                                          ])),
                                    /* [] */0
                                  ]));
                    })));
  }
}

function view(model) {
  var match = model[/* matrix_id */1];
  return Tea_html.div(undefined, undefined, /* [] */0, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                Tea_html.span(undefined, undefined, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        Tea_html.style("text-weight", "bold"),
                        /* [] */0
                      ]), /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        Tea_html.text(match !== undefined ? match : "disconnected"),
                        /* [] */0
                      ])),
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    content(model),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        Tea_html.button(undefined, undefined, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                Tea_html.onClick(/* GoTo */Caml_chrome_debugger.variant("GoTo", 3, [/* Index */0])),
                                /* [] */0
                              ]), /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                Tea_html.text("Index"),
                                /* [] */0
                              ])),
                        /* [] */0
                      ])
                  ])
              ]));
}

var main = Tea_navigation.navigationProgram(location_changed, /* record */Caml_chrome_debugger.record([
        "init",
        "update",
        "view",
        "subscriptions",
        "shutdown"
      ], [
        init,
        update,
        view,
        (function (param) {
            return Tea_sub.none;
          }),
        (function (param) {
            return Tea_cmd.none;
          })
      ]));

export {
  login ,
  getJoinedRooms ,
  location_changed ,
  goTo ,
  route_of_location ,
  location_of_route ,
  update_route ,
  init ,
  update ,
  content ,
  view ,
  main ,
  
}
/* main Not a pure module */
